basePath: /
definitions:
  handler.CreateUserParamsRequest:
    properties:
      appearance:
        type: boolean
      calmness:
        type: boolean
      intuitiveness:
        type: boolean
      lighting:
        type: boolean
      people_density:
        type: boolean
      self_service:
        type: boolean
      signage:
        type: boolean
      smell:
        type: boolean
      staff_attitude:
        type: boolean
      tactility:
        type: boolean
      temperature:
        type: boolean
    type: object
  handler.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handler.LoginResponse:
    properties:
      token:
        type: string
    type: object
  handler.OrganizationCreateRequest:
    properties:
      address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      organization_type:
        type: string
    required:
    - address
    - organization_type
    type: object
  handler.OrganizationParamsAverageRequest:
    properties:
      organization_id:
        type: integer
      params:
        items:
          type: string
        minItems: 1
        type: array
    required:
    - organization_id
    - params
    type: object
  handler.OrganizationParamsAverageResponse:
    properties:
      average:
        type: number
      organization_id:
        type: integer
      params:
        items:
          type: string
        type: array
    type: object
  handler.OrganizationUpdateRequest:
    properties:
      address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      organization_type:
        type: string
    type: object
  handler.OrganizationWithSelectedAverage:
    properties:
      average:
        type: number
      organization: {}
      params:
        items:
          type: string
        type: array
    type: object
  handler.OrganizationsParamsAverageByTypeRequest:
    properties:
      organization_type:
        type: string
      params:
        items:
          type: string
        minItems: 1
        type: array
      threshold:
        description: Optional threshold; if omitted, defaults to 3.0
        type: number
    required:
    - organization_type
    - params
    type: object
  handler.OrganizationsParamsAverageByTypeResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/handler.OrganizationWithSelectedAverage'
        type: array
      organization_type:
        type: string
    type: object
  handler.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  handler.RegisterResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.Organization:
    properties:
      address:
        type: string
      id:
        type: integer
      latitude:
        description: optional
        type: number
      longitude:
        description: optional
        type: number
      organization_type:
        type: string
      owner_id:
        description: один владелец - одна организация
        type: integer
      params:
        $ref: '#/definitions/model.OrganizationParams'
    type: object
  model.OrganizationParams:
    properties:
      appearance_avg:
        type: number
      appearance_count:
        type: integer
      appearance_sum:
        type: integer
      calmness_avg:
        type: number
      calmness_count:
        type: integer
      calmness_sum:
        type: integer
      id:
        type: integer
      intuitiveness_avg:
        type: number
      intuitiveness_count:
        type: integer
      intuitiveness_sum:
        type: integer
      lighting_avg:
        type: number
      lighting_count:
        type: integer
      lighting_sum:
        type: integer
      organization_id:
        type: integer
      people_density_avg:
        type: number
      people_density_count:
        type: integer
      people_density_sum:
        type: integer
      self_service_avg:
        type: number
      self_service_count:
        type: integer
      self_service_sum:
        type: integer
      signage_avg:
        type: number
      signage_count:
        type: integer
      signage_sum:
        type: integer
      smell_avg:
        type: number
      smell_count:
        type: integer
      smell_sum:
        type: integer
      staff_attitude_avg:
        type: number
      staff_attitude_count:
        type: integer
      staff_attitude_sum:
        type: integer
      tactility_avg:
        type: number
      tactility_count:
        type: integer
      tactility_sum:
        type: integer
      temperature_avg:
        type: number
      temperature_count:
        type: integer
      temperature_sum:
        type: integer
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        description: например, "user", "admin"
        type: string
    type: object
  model.UserParams:
    properties:
      appearance:
        type: boolean
      calmness:
        type: boolean
      id:
        type: integer
      intuitiveness:
        type: boolean
      lighting:
        type: boolean
      people_density:
        type: boolean
      self_service:
        type: boolean
      signage:
        type: boolean
      smell:
        type: boolean
      staff_attitude:
        type: boolean
      tactility:
        type: boolean
      temperature:
        type: boolean
      user_id:
        description: Один к одному
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server.
  title: 2gis-calm-map API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns JWT token
      parameters:
      - description: Login credentials (email & password)
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LoginResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth
  /organization:
    get:
      description: Get organization for current user (admin can also fetch for self
        only here)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Organization'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get organization (owner self)
      tags:
      - organization
    patch:
      consumes:
      - application/json
      description: Partially update organization (owner/admin)
      parameters:
      - description: Fields to update
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.OrganizationUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Organization'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update organization
      tags:
      - organization
    post:
      consumes:
      - application/json
      description: 'Create organization for current user (1:1). Roles: owner, admin'
      parameters:
      - description: Organization data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.OrganizationCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Organization'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create organization
      tags:
      - organization
  /organization/params/average:
    post:
      consumes:
      - application/json
      description: Returns (avg(param1)+...)/N for specified params. Requires JWT
        (admin/owner of org).
      parameters:
      - description: Organization params average request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.OrganizationParamsAverageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.OrganizationParamsAverageResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Compute average across selected organization params
      tags:
      - organization-params
  /organization/params/average/by-type:
    post:
      consumes:
      - application/json
      description: For every organization of a specified type computes (avg(p1)+...)/N
        and returns only those with average > threshold (default 3.0).
      parameters:
      - description: Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.OrganizationsParamsAverageByTypeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.OrganizationsParamsAverageByTypeResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Compute averages for each organization of given type
      tags:
      - organization-params
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user and returns a JWT token
      parameters:
      - description: User registration data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.RegisterResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register new user
      tags:
      - users
  /user-params:
    post:
      consumes:
      - application/json
      description: Saves user evaluation parameters. Requires JWT token.
      parameters:
      - description: User parameters
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.CreateUserParamsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserParams'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create user parameters
      tags:
      - user-params
  /user-params/{user_id}:
    get:
      description: Returns user evaluation parameters. Requires JWT token.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserParams'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user parameters by user id
      tags:
      - user-params
    patch:
      consumes:
      - application/json
      description: Partially updates user evaluation parameters. Requires JWT token.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: Fields to update (any subset)
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.CreateUserParamsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserParams'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Partially update user parameters by user id
      tags:
      - user-params
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: Get users
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
